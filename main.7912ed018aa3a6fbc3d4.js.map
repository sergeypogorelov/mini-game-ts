{"version":3,"file":"main.7912ed018aa3a6fbc3d4.js","mappings":"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","sources":["webpack://mini-game-ts/./src/assets/images/level-demo.png","webpack://mini-game-ts/./src/assets/sprites/crystal-blue.png","webpack://mini-game-ts/./src/assets/sprites/crystal-green.png","webpack://mini-game-ts/./src/assets/sprites/crystal-grey.png","webpack://mini-game-ts/./src/assets/sprites/crystal-red.png","webpack://mini-game-ts/./src/assets/sprites/explosion.png","webpack://mini-game-ts/webpack/bootstrap","webpack://mini-game-ts/webpack/runtime/global","webpack://mini-game-ts/webpack/runtime/publicPath","webpack://mini-game-ts/./src/assets.ts","webpack://mini-game-ts/./src/app/game/entities/game-entity.ts","webpack://mini-game-ts/./src/app/engine/core/point.ts","webpack://mini-game-ts/./src/app/engine/core/size.ts","webpack://mini-game-ts/./src/app/engine/core/event-emmiter.ts","webpack://mini-game-ts/./src/app/engine/core/utils.ts","webpack://mini-game-ts/./src/app/engine/level.ts","webpack://mini-game-ts/./src/app/engine/entities/entity.ts","webpack://mini-game-ts/./src/app/game/entities/crystal.ts","webpack://mini-game-ts/./src/app/engine/core/sprite.ts","webpack://mini-game-ts/./src/app/engine/schedules/schedule.ts","webpack://mini-game-ts/./src/app/engine/schedules/every-time-schedule.ts","webpack://mini-game-ts/./src/app/engine/core/sprite-animation.ts","webpack://mini-game-ts/./src/app/game/entities/empty-cell.ts","webpack://mini-game-ts/./src/app/game/demo-level.ts","webpack://mini-game-ts/./src/app/engine/core/renderer.ts","webpack://mini-game-ts/./src/app/engine/engine.ts","webpack://mini-game-ts/./src/app/game/game.ts","webpack://mini-game-ts/./src/app/ui/web-animator.ts","webpack://mini-game-ts/./src/app/engine/assets-manager.ts","webpack://mini-game-ts/./src/app/engine/core/img.ts","webpack://mini-game-ts/./src/app/ui/resource-loader/abstract-loader.ts","webpack://mini-game-ts/./src/app/ui/resource-loader/audio-loader.ts","webpack://mini-game-ts/./src/app/ui/resource-loader/image-loader.ts","webpack://mini-game-ts/./src/app/ui/resource-loader/resource-loader.ts","webpack://mini-game-ts/./src/app/ui/web-assets-manager.ts","webpack://mini-game-ts/./src/app/ui/web-graphic-context.ts","webpack://mini-game-ts/./src/app/ui/web-player-input.ts","webpack://mini-game-ts/./src/app/ui/web-resolution-adapter.ts","webpack://mini-game-ts/./src/index.ts","webpack://mini-game-ts/./src/app/app.ts"],"sourcesContent":["export default __webpack_public_path__ + \"assets/images/level-demo.c109a2fa11de5e2fe5cab5c3f523fa96.png\";","export default __webpack_public_path__ + \"assets/sprites/crystal-blue.af895ca3686b6d42b27c5d71c94d9cf4.png\";","export default __webpack_public_path__ + \"assets/sprites/crystal-green.2dc54d5f76a41ce5ec2f3b5cd6282ed9.png\";","export default __webpack_public_path__ + \"assets/sprites/crystal-grey.f42b27cbd2ff502508f6ae7fb66f89b4.png\";","export default __webpack_public_path__ + \"assets/sprites/crystal-red.dd9f24bac070cf32da12dea9c683b9dd.png\";","export default __webpack_public_path__ + \"assets/sprites/explosion.9866389c62f3df6cff68df5c5828f521.png\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","/* eslint-disable-next-line */\r\nexport const levelDemoImgUrl = require('./assets/images/level-demo.png').default;\r\n\r\n/* eslint-disable-next-line */\r\nexport const crystalRedSpriteUrl = require('./assets/sprites/crystal-red.png').default;\r\n\r\nexport const crystalRedSpriteFrames: number[][] = [\r\n  [0, 0, 32, 32],\r\n  [32, 0, 32, 32],\r\n  [64, 0, 32, 32],\r\n  [96, 0, 32, 32],\r\n  [128, 0, 32, 32],\r\n  [160, 0, 32, 32],\r\n  [192, 0, 32, 32],\r\n  [224, 0, 32, 32],\r\n];\r\n\r\n/* eslint-disable-next-line */\r\nexport const crystalGreenSpriteUrl = require('./assets/sprites/crystal-green.png').default;\r\n\r\nexport const crystalGreenSpriteFrames: number[][] = [\r\n  [0, 0, 32, 32],\r\n  [32, 0, 32, 32],\r\n  [64, 0, 32, 32],\r\n  [96, 0, 32, 32],\r\n  [128, 0, 32, 32],\r\n  [160, 0, 32, 32],\r\n  [192, 0, 32, 32],\r\n  [224, 0, 32, 32],\r\n];\r\n\r\n/* eslint-disable-next-line */\r\nexport const crystalBlueSpriteUrl = require('./assets/sprites/crystal-blue.png').default;\r\n\r\nexport const crystalBlueSpriteFrames: number[][] = [\r\n  [0, 0, 32, 32],\r\n  [32, 0, 32, 32],\r\n  [64, 0, 32, 32],\r\n  [96, 0, 32, 32],\r\n  [128, 0, 32, 32],\r\n  [160, 0, 32, 32],\r\n  [192, 0, 32, 32],\r\n  [224, 0, 32, 32],\r\n];\r\n\r\n/* eslint-disable-next-line */\r\nexport const crystalGreySpriteUrl = require('./assets/sprites/crystal-grey.png').default;\r\n\r\nexport const crystalGreySpriteFrames: number[][] = [\r\n  [0, 0, 32, 32],\r\n  [32, 0, 32, 32],\r\n  [64, 0, 32, 32],\r\n  [96, 0, 32, 32],\r\n  [128, 0, 32, 32],\r\n  [160, 0, 32, 32],\r\n  [192, 0, 32, 32],\r\n  [224, 0, 32, 32],\r\n];\r\n\r\n/* eslint-disable-next-line */\r\nexport const explosionSpriteUrl = require('./assets/sprites/explosion.png').default;\r\n\r\nexport const explosionSpriteFrames: number[][] = [\r\n  [0, 0, 100, 100],\r\n  [100, 0, 100, 100],\r\n  [200, 0, 100, 100],\r\n  [300, 0, 100, 100],\r\n  [400, 0, 100, 100],\r\n\r\n  [0, 100, 100, 100],\r\n  [100, 100, 100, 100],\r\n  [200, 100, 100, 100],\r\n  [300, 100, 100, 100],\r\n  [400, 100, 100, 100],\r\n\r\n  [0, 200, 100, 100],\r\n  [100, 200, 100, 100],\r\n  [200, 200, 100, 100],\r\n  [300, 200, 100, 100],\r\n  [400, 200, 100, 100],\r\n\r\n  [0, 300, 100, 100],\r\n  [100, 300, 100, 100],\r\n  [200, 300, 100, 100],\r\n  [300, 300, 100, 100],\r\n  [400, 300, 100, 100],\r\n\r\n  [0, 400, 100, 100],\r\n  [100, 400, 100, 100],\r\n  [200, 400, 100, 100],\r\n  [300, 400, 100, 100],\r\n  [400, 400, 100, 100],\r\n];\r\n","import { IPoint } from '../../engine/core/point';\r\nimport { ISize, Size } from '../../engine/core/size';\r\n\r\nimport { Entity } from '../../engine/entities/entity';\r\n\r\nexport enum GameEntityTypes {\r\n  Crystal = 'crystal',\r\n  EmptyCell = 'empty-cell',\r\n}\r\n\r\nexport abstract class GameEntity extends Entity {\r\n  public static readonly defSize: ISize = new Size(5, 5);\r\n\r\n  public static readonly closestEntitiesPredicates: ((e1: GameEntity, e2: GameEntity) => boolean)[] = [\r\n    /// e2\r\n    /// e1\r\n    ///\r\n    (e1: GameEntity, e2: GameEntity): boolean => {\r\n      return e1.location.x === e2.location.x && e1.location.y - GameEntity.defSize.height === e2.location.y;\r\n    },\r\n    ///\r\n    /// e1 e2\r\n    ///\r\n    (e1: GameEntity, e2: GameEntity): boolean => {\r\n      return e1.location.x + GameEntity.defSize.width === e2.location.x && e1.location.y === e2.location.y;\r\n    },\r\n    ///\r\n    /// e1\r\n    /// e2\r\n    (e1: GameEntity, e2: GameEntity): boolean => {\r\n      return e1.location.x === e2.location.x && e1.location.y + GameEntity.defSize.height === e2.location.y;\r\n    },\r\n    ///\r\n    /// e2 e1\r\n    ///\r\n    (e1: GameEntity, e2: GameEntity): boolean => {\r\n      return e1.location.x - GameEntity.defSize.width === e2.location.x && e1.location.y === e2.location.y;\r\n    },\r\n  ];\r\n\r\n  public get type(): GameEntityTypes {\r\n    return this._type;\r\n  }\r\n\r\n  public constructor(type: GameEntityTypes, location: IPoint, size: ISize) {\r\n    super(location, size);\r\n\r\n    this.setType(type);\r\n  }\r\n\r\n  public checkNeighbor(entity: GameEntity): boolean {\r\n    if (!entity) {\r\n      throw new Error('Entity is not specified.');\r\n    }\r\n\r\n    for (const predicate of GameEntity.closestEntitiesPredicates) {\r\n      if (predicate(this, entity)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public abstract checkSwap(entity: GameEntity): boolean;\r\n\r\n  public changeLocation(newLocation: IPoint): void {\r\n    this.setLocation(newLocation);\r\n  }\r\n\r\n  private _type: GameEntityTypes;\r\n\r\n  private setType(type: GameEntityTypes): void {\r\n    if (!type) {\r\n      throw new Error('Type is not specified.');\r\n    }\r\n\r\n    this._type = type;\r\n  }\r\n}\r\n","export interface IPoint {\r\n  readonly x: number;\r\n  readonly y: number;\r\n}\r\n\r\nexport class Point implements IPoint {\r\n  public readonly x: number;\r\n  public readonly y: number;\r\n  public constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n","export interface ISize {\r\n  readonly width: number;\r\n  readonly height: number;\r\n}\r\n\r\nexport class Size implements ISize {\r\n  public readonly width: number;\r\n  public readonly height: number;\r\n  public constructor(width: number, height: number) {\r\n    if (width <= 0) {\r\n      throw new Error('Width should be greater tnan 0.');\r\n    }\r\n\r\n    this.width = width;\r\n\r\n    if (height <= 0) {\r\n      throw new Error('Height should be greater than 0.');\r\n    }\r\n\r\n    this.height = height;\r\n  }\r\n}\r\n","export interface IEventRef {\r\n  detach(): void;\r\n}\r\n\r\nexport class EventEmitter<T> {\r\n  public attach(callback: (ev: T) => void): IEventRef {\r\n    if (!callback) {\r\n      throw new Error('Callback is not specified.');\r\n    }\r\n\r\n    const callbackWrapper = (ev: T) => {\r\n      callback(ev);\r\n    };\r\n\r\n    this._callbacks.push(callbackWrapper);\r\n\r\n    return {\r\n      detach: () => {\r\n        this._callbacks = this._callbacks.filter((c) => c === callbackWrapper);\r\n      },\r\n    };\r\n  }\r\n\r\n  public emit(ev?: T): void {\r\n    this._callbacks.forEach((c) => c(ev));\r\n  }\r\n\r\n  private _callbacks: ((ev: T) => void)[] = [];\r\n}\r\n","import { IPoint } from './point';\r\nimport { ISize } from './size';\r\n\r\nexport class Utils {\r\n  public static getRandomInteger(min: number, max: number): number {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  public static checkTouch(point: IPoint, targetPoint: IPoint, targetSize: ISize): boolean {\r\n    if (!point) {\r\n      throw new Error('Point is not specified.');\r\n    }\r\n\r\n    if (!targetPoint) {\r\n      throw new Error('Target point is not specified.');\r\n    }\r\n\r\n    if (!targetSize) {\r\n      throw new Error('Target size is not specified.');\r\n    }\r\n\r\n    const { x, y } = point;\r\n    const { x: tx, y: ty } = targetPoint;\r\n    const { width: tw, height: th } = targetSize;\r\n\r\n    return x >= tx && x <= tx + tw && y >= ty && y <= ty + th;\r\n  }\r\n\r\n  private constructor() {\r\n    /// static class\r\n  }\r\n}\r\n","import { AssetsManager } from './assets-manager';\r\nimport { EventEmitter } from './core/event-emmiter';\r\nimport { IRenderable } from './core/interfaces/renderable.interface';\r\nimport { IUpdateable } from './core/interfaces/updateable.interface';\r\nimport { IPoint } from './core/point';\r\nimport { Renderer } from './core/renderer';\r\nimport { ISize } from './core/size';\r\n\r\nexport abstract class Level implements IUpdateable, IRenderable {\r\n  public readonly onVictory = new EventEmitter<void>();\r\n\r\n  public readonly onDefeat = new EventEmitter<void>();\r\n\r\n  public get isLoaded(): boolean {\r\n    return this._isLoaded;\r\n  }\r\n\r\n  public get size(): ISize {\r\n    return this._size;\r\n  }\r\n\r\n  public get assetsManager(): AssetsManager {\r\n    return this._assetsManager;\r\n  }\r\n\r\n  public constructor(assetsManager: AssetsManager, size: ISize) {\r\n    this.setAssetsManager(assetsManager);\r\n    this.setSize(size);\r\n  }\r\n\r\n  public abstract update(dt: number): void;\r\n\r\n  public abstract render(renderer: Renderer): void;\r\n\r\n  public abstract touch(pointInUnits: IPoint): void;\r\n\r\n  public async load(): Promise<Level> {\r\n    this._isLoaded = false;\r\n\r\n    await this.assetsManager.load(this.imageIds);\r\n    await this.loadEntities();\r\n\r\n    this._isLoaded = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  protected abstract imageIds: string[];\r\n\r\n  protected abstract loadEntities(): Promise<void>;\r\n\r\n  private _isLoaded: boolean;\r\n\r\n  private _size: ISize;\r\n\r\n  private _assetsManager: AssetsManager;\r\n\r\n  private setSize(size: ISize): void {\r\n    if (!size) {\r\n      throw new Error('Level size is not specified.');\r\n    }\r\n\r\n    this._size = size;\r\n  }\r\n\r\n  private setAssetsManager(assetsManager: AssetsManager): void {\r\n    if (!assetsManager) {\r\n      throw new Error('Assets manager is not specified.');\r\n    }\r\n\r\n    this._assetsManager = assetsManager;\r\n  }\r\n}\r\n","import { IUpdateable } from '../core/interfaces/updateable.interface';\r\nimport { IRenderable } from '../core/interfaces/renderable.interface';\r\nimport { IDestroyable } from '../core/interfaces/destroyable.interface';\r\n\r\nimport { IPoint } from '../core/point';\r\nimport { ISize } from '../core/size';\r\n\r\nimport { EventEmitter } from '../core/event-emmiter';\r\nimport { Renderer } from '../core/renderer';\r\n\r\nexport abstract class Entity implements IUpdateable, IRenderable, IDestroyable {\r\n  public readonly onDisposalReady = new EventEmitter<void>();\r\n\r\n  public get location(): IPoint {\r\n    return this._location;\r\n  }\r\n\r\n  public get size(): ISize {\r\n    return this._size;\r\n  }\r\n\r\n  public constructor(location: IPoint, size: ISize) {\r\n    this.setLocation(location);\r\n    this.setSize(size);\r\n  }\r\n\r\n  public abstract update(dt: number): void;\r\n\r\n  public abstract render(renderer: Renderer): void;\r\n\r\n  public abstract destroy(): void;\r\n\r\n  protected setLocation(location: IPoint): void {\r\n    if (!location) {\r\n      throw new Error('Location is not specified.');\r\n    }\r\n\r\n    this._location = location;\r\n  }\r\n\r\n  protected setSize(size: ISize): void {\r\n    if (!size) {\r\n      throw new Error('Size is not specified.');\r\n    }\r\n\r\n    this._size = size;\r\n  }\r\n\r\n  private _location: IPoint;\r\n\r\n  private _size: ISize;\r\n}\r\n","import {\r\n  crystalBlueSpriteFrames,\r\n  crystalBlueSpriteUrl,\r\n  crystalGreenSpriteFrames,\r\n  crystalGreenSpriteUrl,\r\n  crystalGreySpriteFrames,\r\n  crystalGreySpriteUrl,\r\n  crystalRedSpriteFrames,\r\n  crystalRedSpriteUrl,\r\n} from '../../../assets';\r\n\r\nimport { IPoint, Point } from '../../engine/core/point';\r\nimport { IImg } from '../../engine/core/img';\r\n\r\nimport { Sprite } from '../../engine/core/sprite';\r\nimport { SpriteAnimation } from '../../engine/core/sprite-animation';\r\n\r\nimport { Renderer } from '../../engine/core/renderer';\r\nimport { Utils } from '../../engine/core/utils';\r\n\r\nimport { GameEntity, GameEntityTypes } from './game-entity';\r\n\r\nexport enum CrystalColors {\r\n  Grey = 'grey',\r\n  Red = 'red',\r\n  Green = 'green',\r\n  Blue = 'blue',\r\n}\r\n\r\nexport enum CrystalLeavingDirections {\r\n  Top = 'top',\r\n  Left = 'left',\r\n}\r\n\r\nexport interface ICrystalParams {\r\n  location: IPoint;\r\n  spriteImage: IImg;\r\n  spriteFrames: number[][];\r\n  explosionSpriteImage: IImg;\r\n  explosionSpriteFrames: number[][];\r\n  color: CrystalColors;\r\n}\r\n\r\nexport class Crystal extends GameEntity {\r\n  public static readonly leavingSpeed = 6;\r\n  public static readonly explosionAnimationSpeed = 15;\r\n\r\n  public static readonly spriteUrlPerColorMap = new Map<CrystalColors, string>([\r\n    [CrystalColors.Grey, crystalGreySpriteUrl],\r\n    [CrystalColors.Red, crystalRedSpriteUrl],\r\n    [CrystalColors.Green, crystalGreenSpriteUrl],\r\n    [CrystalColors.Blue, crystalBlueSpriteUrl],\r\n  ]);\r\n\r\n  public static readonly spriteFramesPerColorMap = new Map<CrystalColors, number[][]>([\r\n    [CrystalColors.Grey, crystalGreySpriteFrames],\r\n    [CrystalColors.Red, crystalRedSpriteFrames],\r\n    [CrystalColors.Green, crystalGreenSpriteFrames],\r\n    [CrystalColors.Blue, crystalBlueSpriteFrames],\r\n  ]);\r\n\r\n  public static readonly animationSpeedByColorMap = new Map<CrystalColors, number>([\r\n    [CrystalColors.Grey, 0],\r\n    [CrystalColors.Red, 24],\r\n    [CrystalColors.Green, 18],\r\n    [CrystalColors.Blue, 22],\r\n  ]);\r\n\r\n  public get isFrozen(): boolean {\r\n    return this._isFrozen;\r\n  }\r\n\r\n  public get isLeaving(): boolean {\r\n    return this._isLeaving;\r\n  }\r\n\r\n  public get isExploding(): boolean {\r\n    return this._isExploding;\r\n  }\r\n\r\n  public get color(): CrystalColors {\r\n    return this._color;\r\n  }\r\n\r\n  public get spriteAnimation(): SpriteAnimation {\r\n    return this._spriteAnimation;\r\n  }\r\n\r\n  public get explosionSpriteAnimation(): SpriteAnimation {\r\n    return this._explosionSpriteAnimation;\r\n  }\r\n\r\n  public constructor(params: ICrystalParams) {\r\n    super(GameEntityTypes.Crystal, params?.location, Crystal.defSize);\r\n\r\n    this.setColor(params?.color);\r\n    this.setSpriteAnimation(params?.spriteImage, params?.spriteFrames);\r\n    this.setExplosionSpriteAnimation(params?.explosionSpriteImage, params?.explosionSpriteFrames);\r\n  }\r\n\r\n  public update(dt: number): void {\r\n    if (this.isExploding) {\r\n      this.explosionSpriteAnimation.update(dt);\r\n    } else {\r\n      this.spriteAnimation.update(dt);\r\n\r\n      if (this.isLeaving) {\r\n        this.updateLeavingLocation(dt);\r\n      }\r\n    }\r\n  }\r\n\r\n  public render(renderer: Renderer): void {\r\n    if (this.isExploding) {\r\n      this.explosionSpriteAnimation.render(renderer, this.location, this.size);\r\n    } else {\r\n      this.spriteAnimation.render(renderer, this.location, this.size);\r\n    }\r\n  }\r\n\r\n  public destroy(): void {\r\n    if (this.isLeaving) {\r\n      return;\r\n    }\r\n\r\n    this._isLeaving = true;\r\n\r\n    const crystalLeavingDirections = Object.values(CrystalLeavingDirections);\r\n    const randomIndex = Utils.getRandomInteger(0, crystalLeavingDirections.length - 1);\r\n\r\n    this._leavingDirection = crystalLeavingDirections[randomIndex];\r\n  }\r\n\r\n  public checkSwap(entity: GameEntity): boolean {\r\n    if (!this.checkNeighbor(entity)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.color === CrystalColors.Grey) {\r\n      return false;\r\n    }\r\n\r\n    if (entity.type === GameEntityTypes.EmptyCell) {\r\n      return true;\r\n    }\r\n\r\n    if (entity.type === GameEntityTypes.Crystal) {\r\n      const crystal = entity as Crystal;\r\n      return crystal.color !== CrystalColors.Grey;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public freeze(): void {\r\n    this._isFrozen = true;\r\n    this.spriteAnimation.isPaused = true;\r\n  }\r\n\r\n  public unfreeze(): void {\r\n    this._isFrozen = false;\r\n    this.spriteAnimation.isPaused = false;\r\n  }\r\n\r\n  private _isFrozen: boolean;\r\n\r\n  private _isLeaving: boolean;\r\n\r\n  private _isExploding: boolean;\r\n\r\n  private _leavingDirection: CrystalLeavingDirections;\r\n\r\n  private _color: CrystalColors;\r\n\r\n  private _spriteAnimation: SpriteAnimation;\r\n\r\n  private _explosionSpriteAnimation: SpriteAnimation;\r\n\r\n  private updateLeavingLocation(dt: number): void {\r\n    if (!this.isLeaving || this.isExploding) {\r\n      return;\r\n    }\r\n\r\n    const { x: cx, y: cy } = this.location;\r\n\r\n    if (cx <= 0 || cy <= 0) {\r\n      this._isExploding = true;\r\n      return;\r\n    }\r\n\r\n    let nx = cx;\r\n    let ny = cy;\r\n\r\n    if (this._leavingDirection === CrystalLeavingDirections.Top) {\r\n      ny = cy - (Crystal.leavingSpeed * dt) / 1000;\r\n    } else if (this._leavingDirection === CrystalLeavingDirections.Left) {\r\n      nx = cx - (Crystal.leavingSpeed * dt) / 1000;\r\n    }\r\n\r\n    this.changeLocation(new Point(nx, ny));\r\n  }\r\n\r\n  private setColor(color: CrystalColors): void {\r\n    if (!color) {\r\n      throw new Error('Crystal color is not specified.');\r\n    }\r\n\r\n    this._color = color;\r\n  }\r\n\r\n  private setSpriteAnimation(spriteImage: IImg, spriteFrames: number[][]): void {\r\n    if (!spriteImage) {\r\n      throw new Error('Sprite image is not specified.');\r\n    }\r\n\r\n    if (!spriteFrames) {\r\n      throw new Error('Sprite frames are not specified.');\r\n    }\r\n\r\n    const sprite = Sprite.createFromArray(spriteImage, spriteFrames);\r\n    const speed = Crystal.animationSpeedByColorMap.get(this.color);\r\n\r\n    this._spriteAnimation = new SpriteAnimation({\r\n      sprite,\r\n      speed,\r\n      isInfinite: true,\r\n    });\r\n\r\n    if (this.color === CrystalColors.Grey) {\r\n      const { spriteAnimation } = this;\r\n      const randomNumber = Utils.getRandomInteger(0, spriteAnimation.countOfFrames - 1);\r\n      spriteAnimation.forceFrameIndex(randomNumber);\r\n    }\r\n  }\r\n\r\n  private setExplosionSpriteAnimation(spriteImage: IImg, spriteFrames: number[][]): void {\r\n    if (!spriteImage) {\r\n      throw new Error('Explosion sprite image is not specified.');\r\n    }\r\n\r\n    if (!spriteFrames) {\r\n      throw new Error('Explosion sprite frames are not specified.');\r\n    }\r\n\r\n    const sprite = Sprite.createFromArray(spriteImage, spriteFrames);\r\n    const speed = Crystal.explosionAnimationSpeed;\r\n\r\n    this._explosionSpriteAnimation = new SpriteAnimation({\r\n      sprite,\r\n      speed,\r\n    });\r\n\r\n    this._explosionSpriteAnimation.onAnimationFinish.attach(() => {\r\n      this.onDisposalReady.emit();\r\n    });\r\n  }\r\n}\r\n","import { IPoint, Point } from './point';\r\nimport { ISize, Size } from './size';\r\n\r\nimport { IImg } from './img';\r\n\r\nexport interface ISpriteFrame {\r\n  readonly srcPoint: IPoint;\r\n  readonly srcSize: ISize;\r\n}\r\n\r\nexport class Sprite {\r\n  public get framesAreReversed(): boolean {\r\n    return this._framesAreReversed;\r\n  }\r\n\r\n  public get frames(): ISpriteFrame[] {\r\n    const frames = this._frames.slice();\r\n\r\n    if (this.framesAreReversed) {\r\n      return frames.reverse();\r\n    }\r\n\r\n    return frames;\r\n  }\r\n\r\n  public set frames(value: ISpriteFrame[]) {\r\n    this.setFrames(value);\r\n  }\r\n\r\n  public get image(): IImg {\r\n    return this._image;\r\n  }\r\n\r\n  public set image(value: IImg) {\r\n    this.setImage(value);\r\n  }\r\n\r\n  public constructor(image: IImg, frames: ISpriteFrame[]) {\r\n    this.setImage(image);\r\n    this.setFrames(frames);\r\n  }\r\n\r\n  public static createFromArray(image: IImg, frames: number[][]): Sprite {\r\n    if (!image) {\r\n      throw new Error('Image is not specified.');\r\n    }\r\n\r\n    if (!frames) {\r\n      throw new Error('Frames are not specified.');\r\n    }\r\n\r\n    return new Sprite(\r\n      image,\r\n      frames.map((i) => ({ srcPoint: new Point(i[0], i[1]), srcSize: new Size(i[2], i[3]) })),\r\n    );\r\n  }\r\n\r\n  public setReversedOrderOfFrames(): void {\r\n    if (!this.framesAreReversed) {\r\n      this._framesAreReversed = true;\r\n    }\r\n  }\r\n\r\n  public setDefaultOrderOfFrames(): void {\r\n    if (this.framesAreReversed) {\r\n      this._framesAreReversed = false;\r\n    }\r\n  }\r\n\r\n  private _framesAreReversed: boolean;\r\n\r\n  private _frames: ISpriteFrame[];\r\n\r\n  private _image: IImg;\r\n\r\n  private setFrames(frames: ISpriteFrame[]): void {\r\n    if (!frames) {\r\n      throw new Error('Sprite frames are not specified.');\r\n    }\r\n\r\n    if (frames.length === 0) {\r\n      throw new Error('Sprite frames are not found.');\r\n    }\r\n\r\n    this._frames = frames.slice();\r\n  }\r\n\r\n  private setImage(image: IImg): void {\r\n    if (!image) {\r\n      throw new Error('Image is not specified.');\r\n    }\r\n\r\n    this._image = image;\r\n  }\r\n}\r\n","import { IUpdateable } from '../core/interfaces/updateable.interface';\r\n\r\nimport { EventEmitter } from '../core/event-emmiter';\r\n\r\nexport abstract class Schedule<T> implements IUpdateable {\r\n  public readonly onTickBeforeUpdate = new EventEmitter<T>();\r\n\r\n  public readonly onTickAfterUpdate = new EventEmitter<T>();\r\n\r\n  public constructor() {\r\n    this.reset();\r\n  }\r\n\r\n  public reset(): void {\r\n    this.timePassed = 0;\r\n  }\r\n\r\n  public update(dt: number): void {\r\n    this.timePassed += dt;\r\n  }\r\n\r\n  protected timePassed: number;\r\n}\r\n","import { Schedule } from './schedule';\r\n\r\nexport class EveryTimeSchedule extends Schedule<number> {\r\n  public get frequency(): number {\r\n    return this._frequency;\r\n  }\r\n\r\n  public get counter(): number {\r\n    return this._counter;\r\n  }\r\n\r\n  public constructor(frequencyInMs: number) {\r\n    super();\r\n    this.setFrequency(frequencyInMs);\r\n  }\r\n\r\n  public checkTick(dt: number): boolean {\r\n    const counter = Math.floor((this.timePassed + dt) / this.frequency);\r\n    return counter > this.counter;\r\n  }\r\n\r\n  public update(dt: number): void {\r\n    const shouldEmitTick = this.checkTick(dt);\r\n\r\n    if (shouldEmitTick) {\r\n      this._counter++;\r\n      this.onTickBeforeUpdate.emit(this._counter);\r\n    }\r\n\r\n    super.update(dt);\r\n\r\n    if (shouldEmitTick) {\r\n      this.onTickAfterUpdate.emit(this._counter);\r\n    }\r\n  }\r\n\r\n  public reset(): void {\r\n    super.reset();\r\n\r\n    this._counter = 0;\r\n  }\r\n\r\n  private _frequency: number;\r\n\r\n  private _counter: number;\r\n\r\n  private setFrequency(frequency: number): void {\r\n    if (!frequency && typeof frequency !== 'number') {\r\n      throw new Error('Frequency is not specified.');\r\n    }\r\n\r\n    if (frequency <= 0) {\r\n      throw new Error('Frequency should more than zero.');\r\n    }\r\n\r\n    this._frequency = frequency;\r\n  }\r\n}\r\n","import { IUpdateable } from './interfaces/updateable.interface';\r\n\r\nimport { IPoint } from './point';\r\nimport { ISize } from './size';\r\n\r\nimport { EventEmitter } from './event-emmiter';\r\nimport { ISpriteFrame, Sprite } from './sprite';\r\nimport { IRenderParams, Renderer } from './renderer';\r\n\r\nimport { EveryTimeSchedule } from '../schedules/every-time-schedule';\r\n\r\nexport interface ISpriteAnimationConfig {\r\n  readonly sprite: Sprite;\r\n\r\n  readonly isInfinite?: boolean;\r\n  readonly speed?: number;\r\n}\r\n\r\nexport class SpriteAnimation implements IUpdateable {\r\n  public static readonly defSpeed = 12;\r\n\r\n  public readonly onAnimationFinish = new EventEmitter<SpriteAnimation>();\r\n\r\n  public isPaused: boolean;\r\n\r\n  public isFinished(): boolean {\r\n    return this._isFinished;\r\n  }\r\n\r\n  public get timePerFrame(): number {\r\n    return 1000 / this._config.speed;\r\n  }\r\n\r\n  public get timePerAllFrames(): number {\r\n    return this.timePerFrame * this._config.sprite.frames.length;\r\n  }\r\n\r\n  public get countOfFrames(): number {\r\n    return this._config.sprite.frames.length;\r\n  }\r\n\r\n  public constructor(config: ISpriteAnimationConfig) {\r\n    this.setConfig(config);\r\n    this.setSchedules();\r\n  }\r\n\r\n  public getCurrentFrame(): ISpriteFrame {\r\n    let index = this._currentFrameIndex;\r\n\r\n    if (typeof this._forcedFrameIndex === 'number') {\r\n      index = this._forcedFrameIndex;\r\n    }\r\n\r\n    const { frames } = this._config.sprite;\r\n    if (index >= frames.length) {\r\n      index = frames.length - 1;\r\n      console.error(this);\r\n    }\r\n\r\n    return frames[index];\r\n  }\r\n\r\n  public update(dt: number): void {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n\r\n    if (this._shouldPreventUpdateOnce) {\r\n      this._shouldPreventUpdateOnce = false;\r\n      return;\r\n    }\r\n\r\n    if (this._isFinished) {\r\n      return;\r\n    }\r\n\r\n    this._singleFrameSchedule.update(dt);\r\n    this._allFramesSchedule.update(dt);\r\n  }\r\n\r\n  public render(renderer: Renderer, destPointInUnits: IPoint, destSizeInUnits: ISize): void {\r\n    const { srcPoint: srcPointInPixels, srcSize: srcSizeInPixels } = this.getCurrentFrame();\r\n    const { image } = this._config.sprite;\r\n\r\n    const renderParams: IRenderParams = {\r\n      image,\r\n      srcPointInPixels,\r\n      srcSizeInPixels,\r\n      destPointInUnits,\r\n      destSizeInUnits,\r\n    };\r\n\r\n    renderer.render(renderParams);\r\n  }\r\n\r\n  public reset(): void {\r\n    this._currentFrameIndex = 0;\r\n\r\n    this._singleFrameSchedule.reset();\r\n    this._allFramesSchedule.reset();\r\n  }\r\n\r\n  public forceFrameIndex(frameIndex: number): void {\r\n    if (frameIndex < 0) {\r\n      throw new Error('Frame index cannot be less than 0.');\r\n    }\r\n\r\n    if (frameIndex >= this.countOfFrames) {\r\n      throw new Error('Frame index is out of range.');\r\n    }\r\n\r\n    this.isPaused = true;\r\n\r\n    this._forcedFrameIndex = frameIndex;\r\n  }\r\n\r\n  public unforceFrameIndex(): void {\r\n    this.isPaused = false;\r\n\r\n    this._forcedFrameIndex = null;\r\n  }\r\n\r\n  public setFramesOrder(isDefault: boolean): void {\r\n    const { sprite } = this._config;\r\n    if (isDefault) {\r\n      sprite.setDefaultOrderOfFrames();\r\n    } else {\r\n      sprite.setReversedOrderOfFrames();\r\n    }\r\n  }\r\n\r\n  private _isFinished = false;\r\n\r\n  private _shouldPreventUpdateOnce = false;\r\n\r\n  private _currentFrameIndex = 0;\r\n\r\n  private _forcedFrameIndex: number = null;\r\n\r\n  private _config: ISpriteAnimationConfig;\r\n\r\n  private _singleFrameSchedule: EveryTimeSchedule;\r\n\r\n  private _allFramesSchedule: EveryTimeSchedule;\r\n\r\n  private setConfig(cfg: ISpriteAnimationConfig): void {\r\n    if (!cfg) {\r\n      throw new Error('Sprite animation config is not defined.');\r\n    }\r\n\r\n    if (!cfg.sprite) {\r\n      throw new Error('Sprite is not found in sprite animation config.');\r\n    }\r\n\r\n    this._config = {\r\n      sprite: cfg.sprite,\r\n      speed: cfg.speed ?? SpriteAnimation.defSpeed,\r\n      isInfinite: cfg.isInfinite ?? false,\r\n    };\r\n  }\r\n\r\n  private setSchedules(): void {\r\n    this._singleFrameSchedule = new EveryTimeSchedule(this.timePerFrame);\r\n    this._singleFrameSchedule.onTickBeforeUpdate.attach(() => {\r\n      this._currentFrameIndex++;\r\n    });\r\n\r\n    this._allFramesSchedule = new EveryTimeSchedule(this.timePerAllFrames);\r\n    this._allFramesSchedule.onTickBeforeUpdate.attach(() => {\r\n      if (this._config.isInfinite) {\r\n        this.reset();\r\n      } else {\r\n        this._isFinished = true;\r\n\r\n        this.onAnimationFinish.emit(this);\r\n      }\r\n\r\n      this._shouldPreventUpdateOnce = true;\r\n    });\r\n  }\r\n}\r\n","import { IPoint } from '../../engine/core/point';\r\nimport { Renderer } from '../../engine/core/renderer';\r\n\r\nimport { GameEntity, GameEntityTypes } from './game-entity';\r\n\r\nexport class EmptyCell extends GameEntity {\r\n  public constructor(location: IPoint) {\r\n    super(GameEntityTypes.EmptyCell, location, EmptyCell.defSize);\r\n  }\r\n\r\n  public update(dt: number): void {\r\n    /// nothing to update\r\n  }\r\n\r\n  public render(renderer: Renderer): void {\r\n    /// nothing to render\r\n  }\r\n\r\n  public destroy(): void {\r\n    this.onDisposalReady.emit();\r\n  }\r\n\r\n  public checkSwap(entity: GameEntity): boolean {\r\n    if (!entity) {\r\n      throw new Error('Entity is not specified.');\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import {\r\n  crystalBlueSpriteUrl,\r\n  crystalGreenSpriteUrl,\r\n  crystalGreySpriteUrl,\r\n  crystalRedSpriteUrl,\r\n  explosionSpriteUrl,\r\n  levelDemoImgUrl,\r\n  explosionSpriteFrames,\r\n} from '../../assets';\r\n\r\nimport { IPoint, Point } from '../engine/core/point';\r\nimport { IImg } from '../engine/core/img';\r\nimport { Size } from '../engine/core/size';\r\n\r\nimport { EventEmitter } from '../engine/core/event-emmiter';\r\nimport { IRenderParams, Renderer } from '../engine/core/renderer';\r\nimport { Utils } from '../engine/core/utils';\r\n\r\nimport { AssetsManager } from '../engine/assets-manager';\r\nimport { Level } from '../engine/level';\r\n\r\nimport { GameEntity, GameEntityTypes } from './entities/game-entity';\r\nimport { Crystal, CrystalColors } from './entities/crystal';\r\nimport { EmptyCell } from './entities/empty-cell';\r\n\r\nexport interface IDemoLevelMatrixData {\r\n  matrixLength: number;\r\n  matrtixWidth: number;\r\n  matrixHeight: number;\r\n  xIndent: number;\r\n  yIndent: number;\r\n  yIndentForMatrix: number;\r\n}\r\n\r\nexport class DemoLevel extends Level {\r\n  public static readonly defSize = new Size(70, 40);\r\n\r\n  public constructor(assetsManager: AssetsManager) {\r\n    super(assetsManager, DemoLevel.defSize);\r\n\r\n    this.setEventHandlers();\r\n  }\r\n\r\n  public update(dt: number): void {\r\n    this._targetCrystals.forEach((crystal) => {\r\n      crystal.update(dt);\r\n    });\r\n\r\n    this._entities.forEach((entity) => {\r\n      entity.update(dt);\r\n    });\r\n  }\r\n\r\n  public render(renderer: Renderer): void {\r\n    renderer.clearContext();\r\n\r\n    this.renderBackground(renderer);\r\n    this.renderEntities(renderer);\r\n  }\r\n\r\n  public touch(pointInUnits: IPoint): void {\r\n    const touchedEntity = this._entities.find((entity) => {\r\n      const { location, size } = entity;\r\n      return Utils.checkTouch(pointInUnits, location, size);\r\n    });\r\n\r\n    if (touchedEntity) {\r\n      this._onTouch.emit(touchedEntity);\r\n    } else {\r\n      this._onFailedTouch.emit();\r\n    }\r\n  }\r\n\r\n  protected imageIds: string[] = [\r\n    levelDemoImgUrl,\r\n    crystalRedSpriteUrl,\r\n    crystalGreenSpriteUrl,\r\n    crystalBlueSpriteUrl,\r\n    crystalGreySpriteUrl,\r\n    explosionSpriteUrl,\r\n  ];\r\n\r\n  protected loadEntities(): Promise<void> {\r\n    this._bgImg = this.assetsManager.getImage(levelDemoImgUrl);\r\n\r\n    const targetCrystals: Crystal[] = [];\r\n    const entities: GameEntity[] = [];\r\n\r\n    const targetColors = this.getColors();\r\n    const crystals = this.generateCrystals();\r\n\r\n    const { matrixLength, xIndent, yIndent, yIndentForMatrix } = this.getMatrixData();\r\n\r\n    for (let i = 0; i < matrixLength; i += 2) {\r\n      const location = new Point(i * GameEntity.defSize.width + xIndent, yIndent);\r\n\r\n      const color = targetColors.pop();\r\n      const crystal = this.createCrystal(location, color);\r\n      crystal.spriteAnimation.setFramesOrder(false);\r\n\r\n      targetCrystals.push(crystal);\r\n    }\r\n\r\n    for (let i = 0; i < matrixLength; i++) {\r\n      const { width, height } = GameEntity.defSize;\r\n\r\n      for (let j = 0; j < matrixLength; j++) {\r\n        const newLocation = new Point(j * width + xIndent, i * height + yIndent + height + yIndentForMatrix);\r\n\r\n        if (j % 2 === 0) {\r\n          const crystal = crystals.pop();\r\n          crystal.changeLocation(newLocation);\r\n\r\n          entities.push(crystal);\r\n        } else {\r\n          if (i % 2 === 0) {\r\n            const crystal = this.createCrystal(newLocation, CrystalColors.Grey);\r\n            entities.push(crystal);\r\n          } else {\r\n            const emptyCell = new EmptyCell(newLocation);\r\n            entities.push(emptyCell);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this._targetCrystals = targetCrystals;\r\n    this._entities = entities;\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private _onTouch: EventEmitter<GameEntity>;\r\n\r\n  private _onFailedTouch: EventEmitter<void>;\r\n\r\n  private _onSwapCheck: EventEmitter<GameEntity>;\r\n\r\n  private _onSwap: EventEmitter<void>;\r\n\r\n  private _touchedCrystal: Crystal;\r\n\r\n  private _targetCrystals: Crystal[];\r\n\r\n  private _entities: GameEntity[];\r\n\r\n  private _bgImg: IImg;\r\n\r\n  private getColors(mix = true): CrystalColors[] {\r\n    const colors: CrystalColors[] = [CrystalColors.Red, CrystalColors.Green, CrystalColors.Blue];\r\n    if (mix) {\r\n      return colors.sort(() => Utils.getRandomInteger(-1, 1));\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  private getMatrixData(): IDemoLevelMatrixData {\r\n    const matrixLength = 2 * this.getColors().length - 1;\r\n\r\n    const yIndentForMatrix = GameEntity.defSize.height * 0.5;\r\n    const matrtixWidth = matrixLength * GameEntity.defSize.width;\r\n    const matrixHeight = matrixLength * GameEntity.defSize.height + GameEntity.defSize.height + yIndentForMatrix;\r\n\r\n    const xIndent = Math.floor((this.size.width - matrtixWidth) / 2);\r\n    const yIndent = Math.floor((this.size.height - matrixHeight) / 2);\r\n\r\n    return {\r\n      matrixLength,\r\n      matrtixWidth,\r\n      matrixHeight,\r\n      xIndent,\r\n      yIndent,\r\n      yIndentForMatrix,\r\n    };\r\n  }\r\n\r\n  private renderBackground(renderer: Renderer): void {\r\n    if (!renderer) {\r\n      throw new Error('Renderer is not specified.');\r\n    }\r\n\r\n    const params: IRenderParams = {\r\n      image: this._bgImg,\r\n      srcPointInPixels: new Point(0, 0),\r\n      srcSizeInPixels: this._bgImg.size,\r\n      destPointInUnits: new Point(0, 0),\r\n      destSizeInUnits: this.size,\r\n    };\r\n\r\n    renderer.render(params);\r\n  }\r\n\r\n  private renderEntities(renderer: Renderer): void {\r\n    if (!renderer) {\r\n      throw new Error('Renderer is not specified.');\r\n    }\r\n\r\n    this._targetCrystals.forEach((crystal) => {\r\n      crystal.render(renderer);\r\n    });\r\n\r\n    this._entities.forEach((entity) => {\r\n      entity.render(renderer);\r\n    });\r\n  }\r\n\r\n  private generateCrystals(): Crystal[] {\r\n    const crystals: Crystal[] = [];\r\n\r\n    const colors: CrystalColors[] = this.getColors(false);\r\n\r\n    const countOfColors = colors.length;\r\n    const countOfCrystalsPerColor = 2 * countOfColors - 1;\r\n\r\n    for (let i = 0; i < colors.length; i++) {\r\n      const color = colors[i];\r\n\r\n      for (let j = 0; j < countOfCrystalsPerColor; j++) {\r\n        const crystal = this.createCrystal(new Point(0, 0), color);\r\n        crystals.push(crystal);\r\n      }\r\n    }\r\n\r\n    return crystals.sort(() => Utils.getRandomInteger(-1, 1));\r\n  }\r\n\r\n  private createCrystal(location: IPoint, color: CrystalColors): Crystal {\r\n    if (!location) {\r\n      throw new Error('Crystal location is not specified.');\r\n    }\r\n\r\n    if (!color) {\r\n      throw new Error('Crystal color is not specified.');\r\n    }\r\n\r\n    const spriteUrlPerColorMap = Crystal.spriteUrlPerColorMap;\r\n    const spriteFramesPerColorMap = Crystal.spriteFramesPerColorMap;\r\n\r\n    const spriteImage = this.assetsManager.getImage(spriteUrlPerColorMap.get(color));\r\n    const spriteFrames = spriteFramesPerColorMap.get(color);\r\n\r\n    const explosionSpriteImage = this.assetsManager.getImage(explosionSpriteUrl);\r\n\r\n    return new Crystal({\r\n      spriteImage,\r\n      spriteFrames,\r\n      explosionSpriteImage,\r\n      explosionSpriteFrames,\r\n      color,\r\n      location,\r\n    });\r\n  }\r\n\r\n  private checkIfRiddleIsSolved(): boolean {\r\n    const { width: entityWidth, height: entityHeight } = GameEntity.defSize;\r\n    const { matrixLength, xIndent, yIndent, yIndentForMatrix } = this.getMatrixData();\r\n\r\n    const matrix: GameEntity[][] = [];\r\n\r\n    this._entities.forEach((entity) => {\r\n      const { x, y } = entity.location;\r\n\r\n      const i = (y - yIndent - yIndentForMatrix - entityHeight) / entityHeight;\r\n      const j = (x - xIndent) / entityWidth;\r\n\r\n      if (!matrix[j]) {\r\n        matrix[j] = [];\r\n      }\r\n\r\n      matrix[j][i] = entity;\r\n    });\r\n\r\n    const targetCrystals = this._targetCrystals.slice();\r\n\r\n    for (let i = 0; i < matrixLength; i += 2) {\r\n      const requiredCrystal = targetCrystals.shift();\r\n      const requiredColor = requiredCrystal.color;\r\n\r\n      const isColumnValid = matrix[i].every((entity) => {\r\n        if (entity.type !== GameEntityTypes.Crystal) {\r\n          return false;\r\n        }\r\n\r\n        const crystal = entity as Crystal;\r\n        return crystal.color === requiredColor;\r\n      });\r\n\r\n      if (!isColumnValid) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private setEventHandlers(): void {\r\n    this._onTouch = new EventEmitter<GameEntity>();\r\n    this._onFailedTouch = new EventEmitter<void>();\r\n    this._onSwapCheck = new EventEmitter<GameEntity>();\r\n    this._onSwap = new EventEmitter<void>();\r\n\r\n    this._onTouch.attach((entity) => {\r\n      if (this._touchedCrystal) {\r\n        this._onSwapCheck.emit(entity);\r\n      } else if (entity.type === GameEntityTypes.Crystal) {\r\n        const crystal = entity as Crystal;\r\n        crystal.freeze();\r\n\r\n        this._touchedCrystal = crystal;\r\n      } else {\r\n        this._onFailedTouch.emit();\r\n      }\r\n    });\r\n\r\n    this._onFailedTouch.attach(() => {\r\n      const crystal = this._touchedCrystal;\r\n\r\n      if (crystal) {\r\n        crystal.unfreeze();\r\n        this._touchedCrystal = null;\r\n      }\r\n    });\r\n\r\n    this._onSwapCheck.attach((entity) => {\r\n      const crystal = this._touchedCrystal;\r\n\r\n      if (crystal.checkSwap(entity)) {\r\n        const crystalLocation = crystal.location;\r\n        crystal.changeLocation(entity.location);\r\n        entity.changeLocation(crystalLocation);\r\n\r\n        this._onSwap.emit();\r\n      }\r\n\r\n      this._onFailedTouch.emit();\r\n    });\r\n\r\n    this._onSwap.attach(() => {\r\n      if (this.checkIfRiddleIsSolved()) {\r\n        this.onVictory.emit();\r\n\r\n        const allEntities = [...this._entities, ...this._targetCrystals];\r\n\r\n        allEntities.forEach((entity) => {\r\n          entity.onDisposalReady.attach(() => {\r\n            this._targetCrystals = this._targetCrystals.filter((e) => e !== entity);\r\n            this._entities = this._entities.filter((e) => e !== entity);\r\n          });\r\n\r\n          entity.destroy();\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { IDrawParams, IDrawable } from './interfaces/drawable.interface';\r\n\r\nimport { IPoint, Point } from './point';\r\nimport { ISize, Size } from './size';\r\nimport { IImg } from './img';\r\n\r\nexport interface IRenderParams {\r\n  image: IImg;\r\n  srcPointInPixels: IPoint;\r\n  srcSizeInPixels: ISize;\r\n  destPointInUnits: IPoint;\r\n  destSizeInUnits: ISize;\r\n}\r\n\r\nexport class Renderer {\r\n  public get sizeInUnits(): ISize {\r\n    return this._sizeInUnits;\r\n  }\r\n\r\n  public get sizeInPixels(): ISize {\r\n    return this._sizeInPixels;\r\n  }\r\n\r\n  public get adjustedSizeInPixels(): ISize {\r\n    return this._adjustedSizeInPixels;\r\n  }\r\n\r\n  public get xIndent(): number {\r\n    return this._xIndent;\r\n  }\r\n\r\n  public get yIndent(): number {\r\n    return this._yIndent;\r\n  }\r\n\r\n  public get xMultiplier(): number {\r\n    return this._xMultiplier;\r\n  }\r\n\r\n  public get yMultiplier(): number {\r\n    return this._yMultiplier;\r\n  }\r\n\r\n  public constructor(context: IDrawable, sizeInPixels: ISize, sizeInUnits: ISize) {\r\n    this.setContext(context);\r\n    this.setSizeInPixels(sizeInPixels);\r\n    this.setSizeInUnits(sizeInUnits);\r\n    this.recalculate();\r\n  }\r\n\r\n  public changeSizeInPixels(sizeInPixels: ISize): void {\r\n    this.setSizeInPixels(sizeInPixels);\r\n    this.recalculate();\r\n  }\r\n\r\n  public changeSizeInUnits(sizeInUnits: ISize): void {\r\n    this.setSizeInUnits(sizeInUnits);\r\n    this.recalculate();\r\n  }\r\n\r\n  public castUnitPointToPixel(pointInUnits: IPoint): IPoint {\r\n    if (!pointInUnits) {\r\n      throw new Error('Point in units is not defined.');\r\n    }\r\n\r\n    const { xIndent, yIndent, xMultiplier, yMultiplier } = this;\r\n\r\n    return new Point(pointInUnits.x * xMultiplier + xIndent, pointInUnits.y * yMultiplier + yIndent);\r\n  }\r\n\r\n  public castUnitSizeToPixel(sizeInUnits: ISize): ISize {\r\n    if (!sizeInUnits) {\r\n      throw new Error('Size in units is not defined.');\r\n    }\r\n\r\n    const { xMultiplier, yMultiplier } = this;\r\n\r\n    return new Size(sizeInUnits.width * xMultiplier, sizeInUnits.height * yMultiplier);\r\n  }\r\n\r\n  public castPixelPointToUnit(pointInPixels: IPoint): IPoint {\r\n    if (!pointInPixels) {\r\n      throw new Error('Point in pixels is not defined.');\r\n    }\r\n\r\n    const { xIndent, yIndent, xMultiplier, yMultiplier } = this;\r\n\r\n    return new Point((pointInPixels.x - xIndent) / xMultiplier, (pointInPixels.y - yIndent) / yMultiplier);\r\n  }\r\n\r\n  public castPixelSizeToUnit(sizeInPixels: ISize): ISize {\r\n    if (!sizeInPixels) {\r\n      throw new Error('Size in pixels is not defined.');\r\n    }\r\n\r\n    const { xMultiplier, yMultiplier } = this;\r\n\r\n    return new Size(sizeInPixels.width / xMultiplier, sizeInPixels.height / yMultiplier);\r\n  }\r\n\r\n  public clearContext(): void {\r\n    this._context.clear();\r\n  }\r\n\r\n  public render(params: IRenderParams): void {\r\n    if (!params) {\r\n      throw new Error('Render params are not defined.');\r\n    }\r\n\r\n    const { image, srcPointInPixels: sp, srcSizeInPixels: ss, destPointInUnits, destSizeInUnits } = params;\r\n\r\n    if (!image) {\r\n      throw new Error('Image for rendering is not defined.');\r\n    }\r\n\r\n    if (!sp) {\r\n      throw new Error('Source point for rendering is not defined.');\r\n    }\r\n\r\n    if (!ss) {\r\n      throw new Error('Source size for rendering is not defined.');\r\n    }\r\n\r\n    if (!destPointInUnits) {\r\n      throw new Error('Destination point for rendering is not defined.');\r\n    }\r\n\r\n    if (!destSizeInUnits) {\r\n      throw new Error('Destination size for rendering is not defined.');\r\n    }\r\n\r\n    const dp = this.castUnitPointToPixel(destPointInUnits);\r\n    const ds = this.castUnitSizeToPixel(destSizeInUnits);\r\n\r\n    const drawParams: IDrawParams = { image, srcPoint: sp, srcSize: ss, destPoint: dp, destSize: ds };\r\n\r\n    this._context.drawImage(drawParams);\r\n  }\r\n\r\n  private _sizeInUnits: ISize;\r\n\r\n  private _sizeInPixels: ISize;\r\n\r\n  private _adjustedSizeInPixels: ISize;\r\n\r\n  private _xIndent: number;\r\n\r\n  private _yIndent: number;\r\n\r\n  private _xMultiplier: number;\r\n\r\n  private _yMultiplier: number;\r\n\r\n  private _context: IDrawable;\r\n\r\n  private setContext(context: IDrawable): void {\r\n    if (!context) {\r\n      throw new Error('Context for rendering is not defined.');\r\n    }\r\n\r\n    this._context = context;\r\n  }\r\n\r\n  private setSizeInUnits(size: ISize): void {\r\n    if (!size) {\r\n      throw new Error('Size in units is not defined.');\r\n    }\r\n\r\n    this._sizeInUnits = size;\r\n  }\r\n\r\n  private setSizeInPixels(size: ISize): void {\r\n    if (!size) {\r\n      throw new Error('Size in pixels is not defined.');\r\n    }\r\n\r\n    this._sizeInPixels = size;\r\n  }\r\n\r\n  private recalculate(): void {\r\n    const { sizeInUnits, sizeInPixels } = this;\r\n\r\n    const adjustedWidth = (sizeInPixels.height * sizeInUnits.width) / sizeInUnits.height;\r\n    if (adjustedWidth <= sizeInPixels.width) {\r\n      this._adjustedSizeInPixels = new Size(adjustedWidth, sizeInPixels.height);\r\n\r\n      this._xIndent = (sizeInPixels.width - adjustedWidth) / 2;\r\n      this._yIndent = 0;\r\n    } else {\r\n      const adjustedHeight = (sizeInPixels.width * sizeInUnits.height) / sizeInUnits.width;\r\n      if (adjustedHeight <= sizeInPixels.height) {\r\n        this._adjustedSizeInPixels = new Size(sizeInPixels.width, adjustedHeight);\r\n\r\n        this._yIndent = (sizeInPixels.height - adjustedHeight) / 2;\r\n        this._xIndent = 0;\r\n      } else {\r\n        throw new Error('Renderer cannot calculate resolution for rendering.');\r\n      }\r\n    }\r\n\r\n    this._xMultiplier = this._adjustedSizeInPixels.width / sizeInUnits.width;\r\n    this._yMultiplier = this._adjustedSizeInPixels.height / sizeInUnits.height;\r\n  }\r\n}\r\n","import { IAnimator } from './core/interfaces/animator.interface';\r\nimport { IDrawable } from './core/interfaces/drawable.interface';\r\nimport { IResolutionWatcher } from './core/interfaces/resolution-adapter.interface';\r\nimport { IPlayerInput } from './core/interfaces/player-input.interface';\r\n\r\nimport { EventEmitter } from './core/event-emmiter';\r\nimport { Renderer } from './core/renderer';\r\n\r\nimport { Level } from './level';\r\n\r\nexport interface IEngineConfig {\r\n  readonly graphicContext: IDrawable;\r\n  readonly resolutionWacther: IResolutionWatcher;\r\n  readonly animator: IAnimator;\r\n  readonly playerInput: IPlayerInput;\r\n}\r\n\r\nexport abstract class Engine {\r\n  public readonly onError = new EventEmitter<Error>();\r\n\r\n  public get isUpdatingEnabled(): boolean {\r\n    return this._isUpdatingEnabled;\r\n  }\r\n\r\n  public get isRenderingEnabled(): boolean {\r\n    return this._isRenderingEnabled;\r\n  }\r\n\r\n  public get isUpdateable(): boolean {\r\n    return Boolean(this.currentLevel?.isLoaded);\r\n  }\r\n\r\n  public get isRenderable(): boolean {\r\n    return Boolean(this.currentLevel?.isLoaded);\r\n  }\r\n\r\n  public get currentLevel(): Level {\r\n    return this._currentLevel;\r\n  }\r\n\r\n  public get renderer(): Renderer {\r\n    return this._renderer;\r\n  }\r\n\r\n  public get engineConfig(): IEngineConfig {\r\n    return this._engineConfig;\r\n  }\r\n\r\n  public constructor(cfg: IEngineConfig) {\r\n    this.setEngineConfig(cfg);\r\n    this.initEngineConfig();\r\n  }\r\n\r\n  public changeCurrentLevel(level: Level): void {\r\n    if (!level) {\r\n      throw new Error('Level is not specified.');\r\n    }\r\n\r\n    if (this.isUpdatingEnabled) {\r\n      throw new Error('Cannot change level as updating is enabled.');\r\n    }\r\n\r\n    if (this.isRenderingEnabled) {\r\n      throw new Error('Cannot change level as rendering is enabled.');\r\n    }\r\n\r\n    if (this._currentLevel) {\r\n      this._currentLevel.assetsManager.clear();\r\n    }\r\n\r\n    this._currentLevel = level;\r\n\r\n    if (this.renderer) {\r\n      this.renderer.changeSizeInUnits(level.size);\r\n    } else {\r\n      const renderer = new Renderer(\r\n        this.engineConfig.graphicContext,\r\n        this.engineConfig.resolutionWacther.currentResolution,\r\n        level.size,\r\n      );\r\n\r\n      this.setRenderer(renderer);\r\n\r\n      this.engineConfig.resolutionWacther.onChange.attach((newSizeInPixels) => {\r\n        this.renderer.changeSizeInPixels(newSizeInPixels);\r\n      });\r\n    }\r\n  }\r\n\r\n  public setUpdatingStatus(enabled: boolean): void {\r\n    this._isUpdatingEnabled = enabled;\r\n  }\r\n\r\n  public setRenderingStatus(enabled: boolean): void {\r\n    this._isRenderingEnabled = enabled;\r\n  }\r\n\r\n  private _isUpdatingEnabled: boolean;\r\n\r\n  private _isRenderingEnabled: boolean;\r\n\r\n  private _currentLevel: Level;\r\n\r\n  private _renderer: Renderer;\r\n\r\n  private _engineConfig: IEngineConfig;\r\n\r\n  private setRenderer(renderer: Renderer): void {\r\n    if (!renderer) {\r\n      throw new Error('Renderer is not specified.');\r\n    }\r\n\r\n    this._renderer = renderer;\r\n  }\r\n\r\n  private setEngineConfig(cfg: IEngineConfig): void {\r\n    if (!cfg) {\r\n      throw new Error('Engine config is not specified.');\r\n    }\r\n\r\n    this._engineConfig = cfg;\r\n  }\r\n\r\n  private initEngineConfig(): void {\r\n    this.engineConfig.animator.onBeforeRepaint.attach((dt) => {\r\n      try {\r\n        if (this.isUpdatingEnabled && this.isUpdateable) {\r\n          this.currentLevel.update(dt);\r\n        }\r\n\r\n        if (this.isRenderingEnabled && this.isRenderable) {\r\n          this.currentLevel.render(this.renderer);\r\n        }\r\n      } catch (e) {\r\n        if (e instanceof Error) {\r\n          this.onError.emit(e);\r\n        }\r\n\r\n        throw e;\r\n      }\r\n    });\r\n\r\n    this.engineConfig.playerInput.onScreenTouch.attach((pointInPixels) => {\r\n      try {\r\n        if (this.currentLevel) {\r\n          const pointInUnits = this.renderer.castPixelPointToUnit(pointInPixels);\r\n          this.currentLevel.touch(pointInUnits);\r\n        }\r\n      } catch (e) {\r\n        if (e instanceof Error) {\r\n          this.onError.emit(e);\r\n        }\r\n\r\n        throw e;\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Engine } from '../engine/engine';\r\n\r\nexport class Game extends Engine {}\r\n","import { IAnimator } from '../engine/core/interfaces/animator.interface';\r\nimport { EventEmitter } from '../engine/core/event-emmiter';\r\n\r\nexport class WebAnimator implements IAnimator {\r\n  public readonly onBeforeRepaint: EventEmitter<number>;\r\n\r\n  public get isRunning(): boolean {\r\n    return Boolean(this._prevDate);\r\n  }\r\n\r\n  public constructor() {\r\n    this.onBeforeRepaint = new EventEmitter<number>();\r\n  }\r\n\r\n  public startAnimating(): void {\r\n    if (this.isRunning) {\r\n      throw new Error('Animator has been already started.');\r\n    }\r\n\r\n    this._prevDate = new Date();\r\n    this._isFirstEmit = true;\r\n\r\n    this.emit();\r\n  }\r\n\r\n  public stopAnimating(): void {\r\n    if (!this.isRunning) {\r\n      throw new Error('Animator has not been started yet.');\r\n    }\r\n\r\n    this._prevDate = null;\r\n  }\r\n\r\n  private _prevDate: Date;\r\n\r\n  private _isFirstEmit: boolean;\r\n\r\n  private emit(): void {\r\n    if (this._isFirstEmit) {\r\n      this._isFirstEmit = false;\r\n\r\n      requestAnimationFrame(() => this.emit());\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this._prevDate) {\r\n      return;\r\n    }\r\n\r\n    const newDate = new Date();\r\n    const dt = newDate.getTime() - this._prevDate.getTime();\r\n\r\n    this.onBeforeRepaint.emit(dt);\r\n\r\n    this._prevDate = newDate;\r\n\r\n    requestAnimationFrame(() => this.emit());\r\n  }\r\n}\r\n","import { IImg } from './core/img';\r\n\r\nexport abstract class AssetsManager {\r\n  public abstract get isLoading(): boolean;\r\n\r\n  public constructor() {\r\n    this.imageStoreMap = new Map<string, IImg>();\r\n  }\r\n\r\n  public getImage(id: string): IImg {\r\n    return this.imageStoreMap.get(id);\r\n  }\r\n\r\n  public abstract load(imageIds: string[]): Promise<void>;\r\n\r\n  public clear(): void {\r\n    this.imageStoreMap.clear();\r\n  }\r\n\r\n  protected readonly imageStoreMap: Map<string, IImg>;\r\n}\r\n","import { ISize } from './size';\r\n\r\nexport interface IImg {\r\n  readonly id: string;\r\n  readonly size: ISize;\r\n}\r\n\r\nexport class Img implements IImg {\r\n  public readonly id: string;\r\n\r\n  public readonly size: ISize;\r\n\r\n  public constructor(id: string, size: ISize) {\r\n    if (!id) {\r\n      throw new Error('Image id is not specified.');\r\n    }\r\n\r\n    this.id = id;\r\n\r\n    if (!size) {\r\n      throw new Error('Image size is not specified.');\r\n    }\r\n\r\n    this.size = size;\r\n  }\r\n}\r\n","export abstract class AbstractLoader<T> {\r\n  public get loading(): boolean {\r\n    return this._loading;\r\n  }\r\n\r\n  public load(urls: string[]): Promise<T[]> {\r\n    if (!urls) {\r\n      throw new Error('URLs are not specified.');\r\n    }\r\n\r\n    if (this.loading) {\r\n      throw new Error('Loading is already in progress.');\r\n    }\r\n\r\n    if (urls.length === 0) {\r\n      return Promise.resolve<T[]>([]);\r\n    }\r\n\r\n    this._loading = true;\r\n\r\n    const promises = urls.map((url) => this.loadByUrl(url));\r\n    return Promise.all(promises).finally(() => (this._loading = false));\r\n  }\r\n\r\n  protected abstract loadByUrl(url: string): Promise<T>;\r\n\r\n  private _loading = false;\r\n}\r\n","import { AbstractLoader } from './abstract-loader';\r\n\r\nexport class AudioLoader extends AbstractLoader<HTMLAudioElement> {\r\n  protected loadByUrl(url: string): Promise<HTMLAudioElement> {\r\n    if (!url) {\r\n      throw new Error('Url is not specified.');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const audioElement = new Audio();\r\n\r\n      audioElement.oncanplaythrough = () => {\r\n        this.handleAudioLoad(url, audioElement);\r\n        resolve(audioElement);\r\n      };\r\n\r\n      audioElement.onerror = (ev: ErrorEvent) => {\r\n        this.handleAudioLoad(url, audioElement);\r\n        reject(ev);\r\n      };\r\n\r\n      audioElement.controls = false;\r\n      audioElement.preload = 'auto';\r\n      audioElement.style.display = 'none';\r\n\r\n      audioElement.src = url;\r\n\r\n      document.body.appendChild(audioElement);\r\n    });\r\n  }\r\n\r\n  private handleAudioLoad(url: string, audioElement: HTMLAudioElement): void {\r\n    if (!url) {\r\n      throw new Error('Url is not defined.');\r\n    }\r\n\r\n    if (!audioElement) {\r\n      throw new Error('Audio element is not defined.');\r\n    }\r\n\r\n    if (document.body.contains(audioElement)) {\r\n      document.body.removeChild(audioElement);\r\n      audioElement.removeAttribute('style');\r\n    }\r\n  }\r\n}\r\n","import { AbstractLoader } from './abstract-loader';\r\n\r\nexport class ImageLoader extends AbstractLoader<HTMLImageElement> {\r\n  protected loadByUrl(url: string): Promise<HTMLImageElement> {\r\n    if (!url) {\r\n      throw new Error('Url is not specified.');\r\n    }\r\n\r\n    return new Promise<HTMLImageElement>((resolve, reject) => {\r\n      const imageElement = new Image();\r\n\r\n      imageElement.onload = () => {\r\n        this.handleImageLoad(url, imageElement);\r\n        resolve(imageElement);\r\n      };\r\n\r\n      imageElement.onerror = (ev: ErrorEvent) => {\r\n        this.handleImageLoad(url, imageElement);\r\n        reject(ev);\r\n      };\r\n\r\n      imageElement.style.display = 'none';\r\n      imageElement.src = url;\r\n\r\n      document.body.appendChild(imageElement);\r\n    });\r\n  }\r\n\r\n  private handleImageLoad(url: string, imageElement: HTMLImageElement): void {\r\n    if (!url) {\r\n      throw new Error('Url is not defined.');\r\n    }\r\n\r\n    if (!imageElement) {\r\n      throw new Error('Image element is not defined.');\r\n    }\r\n\r\n    document.body.removeChild(imageElement);\r\n    imageElement.removeAttribute('style');\r\n  }\r\n}\r\n","import { IResourceLoadRequest } from './resource-load-request.interface';\r\nimport { IResourceLoadResult } from './resource-load-result.interface';\r\n\r\nimport { AudioLoader } from './audio-loader';\r\nimport { ImageLoader } from './image-loader';\r\n\r\nexport class ResourceLoader {\r\n  public static getInstance(): ResourceLoader {\r\n    if (!ResourceLoader._instance) {\r\n      ResourceLoader._instance = new ResourceLoader();\r\n    }\r\n\r\n    return ResourceLoader._instance;\r\n  }\r\n\r\n  public get loading(): boolean {\r\n    return this._imageLoader.loading || this._audioLoader.loading;\r\n  }\r\n\r\n  public load(request: IResourceLoadRequest): Promise<IResourceLoadResult> {\r\n    if (!request) {\r\n      throw new Error('Request for loading resources is not specified.');\r\n    }\r\n\r\n    if (this.loading) {\r\n      throw new Error('Loading is already in progress.');\r\n    }\r\n\r\n    return new Promise<IResourceLoadResult>((resolve, reject) => {\r\n      const promises: [Promise<HTMLImageElement[]>, Promise<HTMLAudioElement[]>] = [\r\n        this._imageLoader.load(request.imageUrls ?? []),\r\n        this._audioLoader.load(request.audioUrls ?? []),\r\n      ];\r\n\r\n      Promise.all(promises)\r\n        .then(([imageResults, audioResults]) => {\r\n          const result: IResourceLoadResult = {\r\n            images: (request.imageUrls ?? []).map((url, index) => ({ url, element: imageResults[index] })),\r\n            sounds: (request.audioUrls ?? []).map((url, index) => ({ url, element: audioResults[index] })),\r\n          };\r\n\r\n          resolve(result);\r\n        })\r\n        .catch((err) => reject(err));\r\n    });\r\n  }\r\n\r\n  private static _instance: ResourceLoader;\r\n\r\n  private _imageLoader = new ImageLoader();\r\n\r\n  private _audioLoader = new AudioLoader();\r\n\r\n  private constructor() {\r\n    /// hide constructor as this class is a singleton\r\n  }\r\n}\r\n","import { AssetsManager } from '../engine/assets-manager';\r\nimport { Img } from '../engine/core/img';\r\nimport { Size } from '../engine/core/size';\r\nimport { IResourceLoadRequest } from './resource-loader/resource-load-request.interface';\r\nimport { IResourceLoadResult } from './resource-loader/resource-load-result.interface';\r\nimport { ResourceLoader } from './resource-loader/resource-loader';\r\n\r\nexport class WebAssetsManager extends AssetsManager {\r\n  public get isLoading(): boolean {\r\n    return this._isLoading;\r\n  }\r\n\r\n  public getImageElement(id: string): HTMLImageElement {\r\n    return this._imageElementStoreMap.get(id);\r\n  }\r\n\r\n  public async load(imageIds: string[]): Promise<void> {\r\n    if (!imageIds) {\r\n      throw new Error('Image ids are not specified.');\r\n    }\r\n\r\n    const req: IResourceLoadRequest = {\r\n      imageUrls: imageIds,\r\n    };\r\n\r\n    let res: IResourceLoadResult;\r\n\r\n    try {\r\n      this._isLoading = true;\r\n\r\n      res = await ResourceLoader.getInstance().load(req);\r\n    } catch (e) {\r\n      throw e;\r\n    } finally {\r\n      this._isLoading = false;\r\n    }\r\n\r\n    if (!this._imageElementStoreMap) {\r\n      this._imageElementStoreMap = new Map<string, HTMLImageElement>();\r\n    }\r\n\r\n    res.images.forEach((imageResultItem) => {\r\n      const { url, element } = imageResultItem;\r\n\r\n      this._imageElementStoreMap.set(url, element);\r\n\r\n      this.imageStoreMap.set(url, new Img(url, new Size(element.width, element.height)));\r\n    });\r\n  }\r\n\r\n  private _isLoading: boolean;\r\n\r\n  private _imageElementStoreMap: Map<string, HTMLImageElement>;\r\n}\r\n","import { IDrawable, IDrawParams } from '../engine/core/interfaces/drawable.interface';\r\nimport { WebAssetsManager } from './web-assets-manager';\r\n\r\nexport class WebGraphicContext implements IDrawable {\r\n  public get canvasEl(): HTMLCanvasElement {\r\n    return this._canvasEl;\r\n  }\r\n\r\n  public get canvasContext(): CanvasRenderingContext2D {\r\n    return this._canvasContext;\r\n  }\r\n\r\n  public get assetsManager(): WebAssetsManager {\r\n    return this._assetsManager;\r\n  }\r\n\r\n  public constructor(canvasEl: HTMLCanvasElement, assetsManager: WebAssetsManager) {\r\n    this.setCanvasEl(canvasEl);\r\n    this.setCanvasContext(canvasEl.getContext('2d'));\r\n    this.setAssetsManager(assetsManager);\r\n  }\r\n\r\n  public clear(): void {\r\n    const { canvasEl, canvasContext } = this;\r\n\r\n    canvasContext.fillStyle = '#000';\r\n    canvasContext.fillRect(0, 0, canvasEl.width, canvasEl.height);\r\n  }\r\n\r\n  public drawImage(params: IDrawParams): void {\r\n    if (!params) {\r\n      throw new Error('Draw params are not specified.');\r\n    }\r\n\r\n    const { image, srcPoint, srcSize, destPoint, destSize } = params;\r\n\r\n    const { x: sx, y: sy } = srcPoint;\r\n    const { width: sw, height: sh } = srcSize;\r\n    const { x: dx, y: dy } = destPoint;\r\n    const { width: dw, height: dh } = destSize;\r\n\r\n    const imageElement = this.assetsManager.getImageElement(image.id);\r\n    this.canvasContext.drawImage(imageElement, sx, sy, sw, sh, dx, dy, dw, dh);\r\n  }\r\n\r\n  private _canvasEl: HTMLCanvasElement;\r\n\r\n  private _canvasContext: CanvasRenderingContext2D;\r\n\r\n  private _assetsManager: WebAssetsManager;\r\n\r\n  private setCanvasEl(el: HTMLCanvasElement): void {\r\n    if (!el) {\r\n      throw new Error('Canvas element is not specified.');\r\n    }\r\n\r\n    this._canvasEl = el;\r\n  }\r\n\r\n  private setCanvasContext(context: CanvasRenderingContext2D): void {\r\n    if (!context) {\r\n      throw new Error('Canvas context is not specified.');\r\n    }\r\n\r\n    this._canvasContext = context;\r\n  }\r\n\r\n  private setAssetsManager(manager: WebAssetsManager): void {\r\n    if (!manager) {\r\n      throw new Error('Assets manager is not specified.');\r\n    }\r\n\r\n    this._assetsManager = manager;\r\n  }\r\n}\r\n","import { IPlayerInput } from '../engine/core/interfaces/player-input.interface';\r\n\r\nimport { IPoint, Point } from '../engine/core/point';\r\nimport { EventEmitter } from '../engine/core/event-emmiter';\r\n\r\nexport class WebPlayerInput implements IPlayerInput {\r\n  public readonly onScreenTouch: EventEmitter<IPoint>;\r\n\r\n  public get isHandling(): boolean {\r\n    return Boolean(this._callback);\r\n  }\r\n\r\n  public get canvasEl(): HTMLCanvasElement {\r\n    return this._canvasEl;\r\n  }\r\n\r\n  public constructor(canvasEl: HTMLCanvasElement) {\r\n    this.setCanvasEl(canvasEl);\r\n\r\n    this.onScreenTouch = new EventEmitter<IPoint>();\r\n  }\r\n\r\n  public startHandling(): void {\r\n    if (this.isHandling) {\r\n      throw new Error('Player input is already being handled.');\r\n    }\r\n\r\n    this._callback = (ev) => {\r\n      const touchPoint = new Point(ev.x, ev.y);\r\n      this.onScreenTouch.emit(touchPoint);\r\n    };\r\n\r\n    this.canvasEl.addEventListener('click', this._callback);\r\n  }\r\n\r\n  public stopHandling(): void {\r\n    if (!this.isHandling) {\r\n      throw new Error('Player input is not being handled yet.');\r\n    }\r\n\r\n    this.canvasEl.removeEventListener('click', this._callback);\r\n\r\n    this._callback = null;\r\n  }\r\n\r\n  private _canvasEl: HTMLCanvasElement;\r\n\r\n  private _callback: (ev: MouseEvent) => void;\r\n\r\n  private setCanvasEl(el: HTMLCanvasElement): void {\r\n    if (!el) {\r\n      throw new Error('Canvas element is not specified.');\r\n    }\r\n\r\n    this._canvasEl = el;\r\n  }\r\n}\r\n","import { IResolutionWatcher } from '../engine/core/interfaces/resolution-adapter.interface';\r\n\r\nimport { ISize, Size } from '../engine/core/size';\r\nimport { EventEmitter } from '../engine/core/event-emmiter';\r\n\r\nexport class WebResolutionWatcher implements IResolutionWatcher {\r\n  public static readonly defDelay = 20;\r\n\r\n  public static readonly indent = 2;\r\n\r\n  public static readonly minWidth = 140;\r\n\r\n  public static readonly minHeight = 50;\r\n\r\n  public readonly onChange: EventEmitter<ISize>;\r\n\r\n  public get delay(): number {\r\n    return this._delay;\r\n  }\r\n\r\n  public get isInProgress(): boolean {\r\n    return this._isInProgress;\r\n  }\r\n\r\n  public get currentResolution(): ISize {\r\n    const indent = WebResolutionWatcher.indent;\r\n\r\n    let width = window.innerWidth - indent;\r\n    let height = window.innerHeight - indent;\r\n\r\n    if (width < WebResolutionWatcher.minWidth) {\r\n      width = WebResolutionWatcher.minWidth;\r\n    }\r\n\r\n    if (height < WebResolutionWatcher.minHeight) {\r\n      height = WebResolutionWatcher.minHeight;\r\n    }\r\n\r\n    return new Size(width, height);\r\n  }\r\n\r\n  public constructor(delay = WebResolutionWatcher.defDelay) {\r\n    this.setDelay(delay);\r\n\r\n    this.onChange = new EventEmitter<ISize>();\r\n  }\r\n\r\n  public startWatching(): void {\r\n    if (this.isInProgress) {\r\n      throw new Error('Resolution watching is already in progress.');\r\n    }\r\n\r\n    this._isInProgress = true;\r\n\r\n    this._callback = () => {\r\n      if (this._timeoutId) {\r\n        clearTimeout(this._timeoutId);\r\n      }\r\n\r\n      this._timeoutId = setTimeout(() => {\r\n        this.onChange.emit(this.currentResolution);\r\n      }, this.delay);\r\n    };\r\n\r\n    window.addEventListener('resize', this._callback);\r\n  }\r\n\r\n  public stopWatching(): void {\r\n    if (!this.isInProgress) {\r\n      throw new Error('Resolution observing has not been started yet.');\r\n    }\r\n\r\n    if (!this._callback) {\r\n      throw new Error('Callback is not specified.');\r\n    }\r\n\r\n    if (this._timeoutId) {\r\n      clearTimeout(this._timeoutId);\r\n    }\r\n\r\n    window.removeEventListener('resize', this._callback);\r\n\r\n    this._callback = null;\r\n    this._isInProgress = false;\r\n  }\r\n\r\n  private _delay: number;\r\n\r\n  private _isInProgress: boolean;\r\n\r\n  private _timeoutId: NodeJS.Timeout;\r\n\r\n  private _callback: () => void;\r\n\r\n  private setDelay(delay: number): void {\r\n    if (!delay) {\r\n      throw new Error('Delay is not specified.');\r\n    }\r\n\r\n    if (delay <= 0) {\r\n      throw new Error('Delay should be greater than 0.');\r\n    }\r\n\r\n    this._delay = delay;\r\n  }\r\n}\r\n","import './index.css';\r\n\r\nimport { App } from './app/app';\r\n\r\nconst rootEl = document.getElementById('root') as HTMLDivElement;\r\nconst app = new App(rootEl);\r\n\r\napp.run();\r\n","import { IEngineConfig } from './engine/engine';\r\n\r\nimport { DemoLevel } from './game/demo-level';\r\nimport { Game } from './game/game';\r\n\r\nimport { WebAnimator } from './ui/web-animator';\r\nimport { WebAssetsManager } from './ui/web-assets-manager';\r\nimport { WebGraphicContext } from './ui/web-graphic-context';\r\nimport { WebPlayerInput } from './ui/web-player-input';\r\nimport { WebResolutionWatcher } from './ui/web-resolution-adapter';\r\n\r\nexport class App {\r\n  public get isRunning(): boolean {\r\n    return this._isRunning;\r\n  }\r\n\r\n  public get rootEl(): HTMLDivElement {\r\n    return this._rootEl;\r\n  }\r\n\r\n  public constructor(rootElement: HTMLDivElement) {\r\n    this.setRootElement(rootElement);\r\n  }\r\n\r\n  public async run(): Promise<void> {\r\n    if (this._isRunning) {\r\n      throw new Error('The app is already running.');\r\n    }\r\n\r\n    this._isRunning = true;\r\n\r\n    const resolutionWacther = new WebResolutionWatcher();\r\n\r\n    const currentResolution = resolutionWacther.currentResolution;\r\n    const canvasEl = this.createCanvasEl(currentResolution.width, currentResolution.height);\r\n\r\n    resolutionWacther.onChange.attach(() => {\r\n      const { width, height } = resolutionWacther.currentResolution;\r\n\r\n      canvasEl.width = width;\r\n      canvasEl.height = height;\r\n    });\r\n\r\n    resolutionWacther.startWatching();\r\n\r\n    const animator = new WebAnimator();\r\n    const assetsManager = new WebAssetsManager();\r\n    const playerInput = new WebPlayerInput(canvasEl);\r\n    const graphicContext = new WebGraphicContext(canvasEl, assetsManager);\r\n\r\n    const engineCfg: IEngineConfig = {\r\n      graphicContext,\r\n      animator,\r\n      resolutionWacther,\r\n      playerInput,\r\n    };\r\n\r\n    const game = new Game(engineCfg);\r\n    game.changeCurrentLevel(new DemoLevel(assetsManager));\r\n    game.currentLevel.onVictory.attach(() => {\r\n      playerInput.stopHandling();\r\n\r\n      this.addVictoryElements();\r\n    });\r\n\r\n    await game.currentLevel.load();\r\n\r\n    this.removeLoaderElement();\r\n    this.addCanvas(canvasEl);\r\n\r\n    animator.startAnimating();\r\n    playerInput.startHandling();\r\n\r\n    game.setUpdatingStatus(true);\r\n    game.setRenderingStatus(true);\r\n  }\r\n\r\n  private _isRunning: boolean;\r\n\r\n  private _rootEl: HTMLDivElement;\r\n\r\n  private createCanvasEl(width: number, height: number): HTMLCanvasElement {\r\n    const canvas = document.createElement('canvas');\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    return canvas;\r\n  }\r\n\r\n  private createDarkLayerElement(): HTMLDivElement {\r\n    const element = document.createElement('div');\r\n    element.classList.add('dark-layer');\r\n\r\n    return element;\r\n  }\r\n\r\n  private createVictoryElement(): HTMLDivElement {\r\n    const element = document.createElement('div');\r\n    element.classList.add('victory');\r\n\r\n    let messageEl = document.createElement('div');\r\n    messageEl.textContent = 'Riddle Solved!';\r\n    element.appendChild(messageEl);\r\n\r\n    messageEl = document.createElement('div');\r\n    messageEl.textContent = 'Congratulations!';\r\n    element.appendChild(messageEl);\r\n\r\n    return element;\r\n  }\r\n\r\n  private addCanvas(canvasEl: HTMLCanvasElement): void {\r\n    if (!canvasEl) {\r\n      throw new Error('Canvas element is not specified.');\r\n    }\r\n\r\n    this._rootEl.appendChild(canvasEl);\r\n  }\r\n\r\n  private addVictoryElements(): void {\r\n    const darkLayerElement = this.createDarkLayerElement();\r\n    this.rootEl.appendChild(darkLayerElement);\r\n\r\n    const victoryElement = this.createVictoryElement();\r\n    this.rootEl.appendChild(victoryElement);\r\n  }\r\n\r\n  private removeLoaderElement(): void {\r\n    const el = document.querySelector('.loader-wrapper');\r\n    this._rootEl.removeChild(el);\r\n  }\r\n\r\n  private setRootElement(el: HTMLDivElement): void {\r\n    if (!el) {\r\n      throw new Error('Root element is not specified.');\r\n    }\r\n\r\n    this._rootEl = el;\r\n  }\r\n}\r\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","GameEntityTypes","levelDemoImgUrl","crystalRedSpriteUrl","crystalRedSpriteFrames","crystalGreenSpriteUrl","crystalGreenSpriteFrames","crystalBlueSpriteUrl","crystalBlueSpriteFrames","crystalGreySpriteUrl","crystalGreySpriteFrames","explosionSpriteUrl","explosionSpriteFrames","x","y","width","height","_callbacks","attach","callback","callbackWrapper","ev","push","detach","filter","c","emit","forEach","getRandomInteger","min","max","Math","ceil","floor","random","checkTouch","point","targetPoint","targetSize","tx","ty","tw","th","assetsManager","size","onVictory","EventEmitter","onDefeat","setAssetsManager","setSize","_isLoaded","_size","_assetsManager","load","imageIds","loadEntities","onDisposalReady","setLocation","_location","CrystalColors","CrystalLeavingDirections","type","setType","_type","checkNeighbor","entity","GameEntity","closestEntitiesPredicates","predicate","changeLocation","newLocation","defSize","Size","e1","e2","Entity","image","frames","setImage","setFrames","_framesAreReversed","_frames","slice","framesAreReversed","reverse","value","_image","createFromArray","Sprite","map","i","srcPoint","Point","srcSize","setReversedOrderOfFrames","setDefaultOrderOfFrames","onTickBeforeUpdate","onTickAfterUpdate","reset","timePassed","update","dt","frequencyInMs","setFrequency","_frequency","_counter","checkTick","frequency","counter","shouldEmitTick","Schedule","config","onAnimationFinish","_isFinished","_shouldPreventUpdateOnce","_currentFrameIndex","_forcedFrameIndex","setConfig","setSchedules","isFinished","_config","speed","timePerFrame","sprite","getCurrentFrame","index","console","error","isPaused","_singleFrameSchedule","_allFramesSchedule","render","renderer","destPointInUnits","destSizeInUnits","srcPointInPixels","srcSizeInPixels","renderParams","forceFrameIndex","frameIndex","countOfFrames","unforceFrameIndex","setFramesOrder","isDefault","cfg","SpriteAnimation","defSpeed","isInfinite","EveryTimeSchedule","timePerAllFrames","params","Crystal","setColor","color","setSpriteAnimation","spriteImage","spriteFrames","setExplosionSpriteAnimation","explosionSpriteImage","_isFrozen","_isLeaving","_isExploding","_color","_spriteAnimation","_explosionSpriteAnimation","isExploding","explosionSpriteAnimation","spriteAnimation","isLeaving","updateLeavingLocation","destroy","crystalLeavingDirections","Object","values","randomIndex","Utils","_leavingDirection","checkSwap","Grey","EmptyCell","freeze","unfreeze","cx","cy","nx","ny","Top","leavingSpeed","Left","animationSpeedByColorMap","get","randomNumber","explosionAnimationSpeed","spriteUrlPerColorMap","Map","Red","Green","Blue","spriteFramesPerColorMap","DemoLevel","setEventHandlers","_targetCrystals","crystal","_entities","clearContext","renderBackground","renderEntities","touch","pointInUnits","touchedEntity","find","_onTouch","_onFailedTouch","_bgImg","getImage","targetCrystals","entities","targetColors","getColors","crystals","generateCrystals","getMatrixData","matrixLength","xIndent","yIndent","yIndentForMatrix","pop","createCrystal","j","emptyCell","Promise","resolve","mix","colors","sort","matrtixWidth","matrixHeight","countOfCrystalsPerColor","checkIfRiddleIsSolved","entityWidth","entityHeight","matrix","requiredColor","shift","every","_onSwapCheck","_onSwap","_touchedCrystal","crystalLocation","Level","context","sizeInPixels","sizeInUnits","setContext","setSizeInPixels","setSizeInUnits","recalculate","_sizeInUnits","_sizeInPixels","_adjustedSizeInPixels","_xIndent","_yIndent","_xMultiplier","_yMultiplier","changeSizeInPixels","changeSizeInUnits","castUnitPointToPixel","xMultiplier","yMultiplier","castUnitSizeToPixel","castPixelPointToUnit","pointInPixels","castPixelSizeToUnit","_context","clear","sp","ss","drawParams","destPoint","destSize","drawImage","adjustedWidth","adjustedHeight","onError","setEngineConfig","initEngineConfig","_isUpdatingEnabled","_isRenderingEnabled","Boolean","currentLevel","isLoaded","_currentLevel","_renderer","_engineConfig","changeCurrentLevel","level","isUpdatingEnabled","isRenderingEnabled","Renderer","engineConfig","graphicContext","resolutionWacther","currentResolution","setRenderer","onChange","newSizeInPixels","setUpdatingStatus","enabled","setRenderingStatus","animator","onBeforeRepaint","isUpdateable","isRenderable","playerInput","onScreenTouch","Engine","_prevDate","startAnimating","isRunning","Date","_isFirstEmit","stopAnimating","requestAnimationFrame","newDate","getTime","imageStoreMap","id","_loading","urls","loading","promises","url","loadByUrl","all","finally","reject","audioElement","Audio","oncanplaythrough","handleAudioLoad","onerror","controls","preload","style","display","body","appendChild","contains","removeChild","removeAttribute","AbstractLoader","imageElement","Image","onload","handleImageLoad","_imageLoader","ImageLoader","_audioLoader","AudioLoader","getInstance","ResourceLoader","_instance","request","imageUrls","audioUrls","then","imageResults","audioResults","result","images","element","sounds","catch","err","_isLoading","getImageElement","_imageElementStoreMap","req","res","imageResultItem","set","Img","AssetsManager","canvasEl","setCanvasEl","setCanvasContext","getContext","_canvasEl","_canvasContext","canvasContext","fillStyle","fillRect","sx","sy","sw","sh","dx","dy","dw","dh","el","manager","_callback","startHandling","isHandling","touchPoint","addEventListener","stopHandling","removeEventListener","delay","WebResolutionWatcher","defDelay","setDelay","_delay","_isInProgress","indent","innerWidth","innerHeight","minWidth","minHeight","startWatching","isInProgress","_timeoutId","clearTimeout","setTimeout","stopWatching","rootElement","setRootElement","_isRunning","_rootEl","run","createCanvasEl","WebAnimator","WebAssetsManager","WebPlayerInput","WebGraphicContext","game","Game","addVictoryElements","removeLoaderElement","addCanvas","canvas","createElement","createDarkLayerElement","classList","add","createVictoryElement","messageEl","textContent","darkLayerElement","rootEl","victoryElement","querySelector","getElementById"],"sourceRoot":""}